{"ast":null,"code":"var _jsxFileName = \"/Users/pc/Library/Mobile Documents/com~apple~CloudDocs/School/Summer 2022/CSCI 395-48/Assignment 5/Client-side/src/components/containers/EditStudentContainer.js\";\n// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n// import EditStudentView from '../views/EditStudentView';\n// import { editStudentThunk } from '../../store/thunks';\n// import { fetchStudent } from '../../store/actions/actionCreators';\n// class EditStudentContainer extends Component {\n//     // Initialize state\n//     constructor(props){\n//       super(props);\n//       this.state = {\n//         firstname: props.firstname,\n//         lastname: \"\", \n//         email: \"\",\n//         imageURL: \"\",\n//         GPA: \"\",\n//         campusId: null, \n//         redirect: false, \n//         redirectId: null\n//       };\n//     }\n//     // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         email: this.state.email,\n//         GPA: this.state.GPA,\n//         campusId: this.state.campusId\n//     };\n//         // Add modified student in back-end database\n//         let modifiedStudent = await this.props.editStudent(student);\n//         // Update state, and trigger redirect to show the new student\n//         this.setState({\n//           firstname: \"\", \n//           lastname: \"\", \n//           email: \"\",\n//           imageURL: \"\",\n//           GPA: \"\",\n//           campusId: null, \n//           redirect: true, \n//           redirectId: modifiedStudent.id\n//         });\n//       }\n//       // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//     this.setState({redirect: false, redirectId: null});\n// }\n// // Render new student input form\n// render() {\n//   // Redirect to new student's page after submit\n//   if(this.state.redirect) {\n//     return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//   }\n//   // Display the input form via the corresponding View component\n//   return (\n//     <div>\n//       <Header />\n//       <EditStudentView \n//         handleChange = {this.handleChange} \n//         handleSubmit = {this.handleSubmit}    \n//       />\n//     </div>          \n//   );\n// }\n// }\n// // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         editStudent: (student) => dispatch(editStudentThunk(student)),\n//     })\n// }\n// // Export store-connected container by default\n// // EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(mapDispatch)(EditStudentContainer);\n\n/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStudentThunk, fetchCampusThunk, deleteStudentThunk, editStudentThunk } from \"../../store/thunks\";\nimport { StudentView } from \"../views\";\nimport { editStudent } from '../../store/actions/actionCreators';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StudentContainer extends Component {\n  // Get student data from back-end database\n  componentDidMount() {\n    //getting student ID from url\n    this.props.fetchStudent(this.props.match.params.id);\n  } // Render Student view by passing student data as props to the corresponding View component\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StudentView, {\n        student: this.props.student,\n        campusId: this.props.campusId,\n        deleteStudent: this.props.deleteStudent,\n        editStudent: this.props.editStudent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\n\n\nconst mapState = state => {\n  return {\n    student: state.student // Get the State object from Reducer \"student\"\n\n  };\n}; // 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    fetchCampus: id => dispatch(fetchCampusThunk(id)),\n    deleteStudent: studentId => dispatch(deleteStudentThunk(studentId)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapState, mapDispatch)(StudentContainer);","map":{"version":3,"names":["Header","React","Component","connect","fetchStudentThunk","fetchCampusThunk","deleteStudentThunk","editStudentThunk","StudentView","editStudent","StudentContainer","componentDidMount","props","fetchStudent","match","params","id","render","student","campusId","deleteStudent","mapState","state","mapDispatch","dispatch","fetchCampus","studentId"],"sources":["/Users/pc/Library/Mobile Documents/com~apple~CloudDocs/School/Summer 2022/CSCI 395-48/Assignment 5/Client-side/src/components/containers/EditStudentContainer.js"],"sourcesContent":["// import Header from './Header';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { Redirect } from 'react-router-dom';\n\n// import EditStudentView from '../views/EditStudentView';\n// import { editStudentThunk } from '../../store/thunks';\n// import { fetchStudent } from '../../store/actions/actionCreators';\n\n\n// class EditStudentContainer extends Component {\n//     // Initialize state\n//     constructor(props){\n//       super(props);\n//       this.state = {\n//         firstname: props.firstname,\n//         lastname: \"\", \n//         email: \"\",\n//         imageURL: \"\",\n//         GPA: \"\",\n//         campusId: null, \n//         redirect: false, \n//         redirectId: null\n//       };\n\n\n//     }\n\n//     // Capture input data when it is entered\n//   handleChange = event => {\n//     this.setState({\n//       [event.target.name]: event.target.value\n//     });\n//   }\n\n//   // Take action after user click the submit button\n//   handleSubmit = async event => {\n//     event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n//     let student = {\n//         firstname: this.state.firstname,\n//         lastname: this.state.lastname,\n//         email: this.state.email,\n//         GPA: this.state.GPA,\n//         campusId: this.state.campusId\n//     };\n\n//         // Add modified student in back-end database\n//         let modifiedStudent = await this.props.editStudent(student);\n\n//         // Update state, and trigger redirect to show the new student\n//         this.setState({\n//           firstname: \"\", \n//           lastname: \"\", \n//           email: \"\",\n//           imageURL: \"\",\n//           GPA: \"\",\n//           campusId: null, \n//           redirect: true, \n//           redirectId: modifiedStudent.id\n//         });\n//       }\n\n//       // Unmount when the component is being removed from the DOM:\n//   componentWillUnmount() {\n//     this.setState({redirect: false, redirectId: null});\n// }\n\n// // Render new student input form\n// render() {\n//   // Redirect to new student's page after submit\n//   if(this.state.redirect) {\n//     return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n//   }\n\n//   // Display the input form via the corresponding View component\n//   return (\n//     <div>\n//       <Header />\n//       <EditStudentView \n//         handleChange = {this.handleChange} \n//         handleSubmit = {this.handleSubmit}    \n//       />\n//     </div>          \n//   );\n// }\n// }\n\n// // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// // The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// // The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n// const mapDispatch = (dispatch) => {\n//     return({\n//         editStudent: (student) => dispatch(editStudentThunk(student)),\n//     })\n// }\n\n// // Export store-connected container by default\n// // EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// // (and re-read the values when the Store State updates).\n// export default connect(mapDispatch)(EditStudentContainer);\n\n\n/*==================================================\nStudentContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { \n  fetchStudentThunk, \n  fetchCampusThunk,\n  deleteStudentThunk,\n  editStudentThunk\n}\nfrom \"../../store/thunks\";\nimport { StudentView } from \"../views\";\nimport { editStudent } from '../../store/actions/actionCreators';\n\nclass StudentContainer extends Component {\n  // Get student data from back-end database\n  componentDidMount() {\n    //getting student ID from url\n    this.props.fetchStudent(this.props.match.params.id);\n  }\n\n  // Render Student view by passing student data as props to the corresponding View component\n  render() {\n    return (\n      <div>\n        <Header />\n        <StudentView \n        student = {this.props.student} \n        campusId ={this.props.campusId}\n        deleteStudent={this.props.deleteStudent}\n        editStudent={this.props.editStudent}\n        />\n      </div>\n    );\n  }\n}\n\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nconst mapState = (state) => {\n  return {\n    student: state.student,  // Get the State object from Reducer \"student\"\n  };\n};\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n  return {\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\n    deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)),\n    editStudent: (student) => dispatch(editStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState, mapDispatch)(StudentContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,iBADF,EAEEC,gBAFF,EAGEC,kBAHF,EAIEC,gBAJF,QAMK,oBANL;AAOA,SAASC,WAAT,QAA4B,UAA5B;AACA,SAASC,WAAT,QAA4B,oCAA5B;;;AAEA,MAAMC,gBAAN,SAA+BR,SAA/B,CAAyC;EACvC;EACAS,iBAAiB,GAAG;IAClB;IACA,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKD,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAAhD;EACD,CALsC,CAOvC;;;EACAC,MAAM,GAAG;IACP,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,WAAD;QACA,OAAO,EAAI,KAAKL,KAAL,CAAWM,OADtB;QAEA,QAAQ,EAAG,KAAKN,KAAL,CAAWO,QAFtB;QAGA,aAAa,EAAE,KAAKP,KAAL,CAAWQ,aAH1B;QAIA,WAAW,EAAE,KAAKR,KAAL,CAAWH;MAJxB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAWD;;AApBsC,C,CAuBzC;AACA;;;AACA,MAAMY,QAAQ,GAAIC,KAAD,IAAW;EAC1B,OAAO;IACLJ,OAAO,EAAEI,KAAK,CAACJ,OADV,CACoB;;EADpB,CAAP;AAGD,CAJD,C,CAKA;AACA;;;AACA,MAAMK,WAAW,GAAIC,QAAD,IAAc;EAChC,OAAO;IACLX,YAAY,EAAGG,EAAD,IAAQQ,QAAQ,CAACpB,iBAAiB,CAACY,EAAD,CAAlB,CADzB;IAELS,WAAW,EAAGT,EAAD,IAAQQ,QAAQ,CAACnB,gBAAgB,CAACW,EAAD,CAAjB,CAFxB;IAGLI,aAAa,EAAGM,SAAD,IAAeF,QAAQ,CAAClB,kBAAkB,CAACoB,SAAD,CAAnB,CAHjC;IAILjB,WAAW,EAAGS,OAAD,IAAaM,QAAQ,CAACjB,gBAAgB,CAACW,OAAD,CAAjB;EAJ7B,CAAP;AAMD,CAPD,C,CASA;AACA;AACA;;;AACA,eAAef,OAAO,CAACkB,QAAD,EAAWE,WAAX,CAAP,CAA+Bb,gBAA/B,CAAf"},"metadata":{},"sourceType":"module"}