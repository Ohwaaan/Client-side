{"ast":null,"code":"var _jsxFileName = \"/Users/pc/Library/Mobile Documents/com~apple~CloudDocs/School/Summer 2022/CSCI 395-48/Assignment 5/Client-side/src/components/containers/EditStudentContainer.js\";\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { editStudentThunk, fetchStudentThunk } from '../../store/thunks';\nimport EditStudentView from '../views/EditStudentView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EditStudentContainer extends Component {\n  // Initialize state\n  //  componentDidMount() {\n  //    //getting student ID from url\n  //    this.props.fetchStudent(this.props.match.params.id);\n  //  }\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        firstname: student.firstname,\n        lastname: student.lastname,\n        email: student.email,\n        GPA: student.GPA,\n        campusId: student.campusId\n      }; // Add modified student in back-end database\n\n      let modifiedStudent = await this.props.editStudent(student.id, student); // Update state, and trigger redirect to show the new student\n\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        imageURL: \"\",\n        GPA: \"\",\n        campusId: null,\n        redirect: true,\n        redirectId: modifiedStudent.id\n      });\n    };\n\n    let _student = this.props.fetchStudent(this.props.match.params.id);\n\n    this.state = {\n      firstname: _student.firstname,\n      //this.props.firstname\n      lastname: _student.lastname,\n      email: \"\",\n      imageURL: \"\",\n      GPA: \"\",\n      campusId: \"\",\n      redirect: false,\n      redirectId: null\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit,\n        student: this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    editStudent: student => dispatch(editStudentThunk(student)),\n    fetchStudent: studentId => dispatch(fetchStudentThunk(studentId))\n  };\n}; // Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(mapDispatch)(EditStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","editStudentThunk","fetchStudentThunk","EditStudentView","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","firstname","lastname","email","GPA","campusId","modifiedStudent","editStudent","id","imageURL","redirect","redirectId","fetchStudent","match","params","state","componentWillUnmount","render","mapDispatch","dispatch","studentId"],"sources":["/Users/pc/Library/Mobile Documents/com~apple~CloudDocs/School/Summer 2022/CSCI 395-48/Assignment 5/Client-side/src/components/containers/EditStudentContainer.js"],"sourcesContent":["import Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { \n  editStudentThunk,\n  fetchStudentThunk \n} from '../../store/thunks';\nimport EditStudentView from '../views/EditStudentView';\n\nclass EditStudentContainer extends Component {\n    // Initialize state\n    //  componentDidMount() {\n    //    //getting student ID from url\n    //    this.props.fetchStudent(this.props.match.params.id);\n    //  }\n\n    constructor(props){\n      super(props);\n      let student = this.props.fetchStudent(this.props.match.params.id)\n      this.state = {\n        firstname: student.firstname, //this.props.firstname\n        lastname: student.lastname,\n        email: \"\",\n        imageURL: \"\",\n        GPA: \"\",\n        campusId: \"\", \n        redirect: false, \n        redirectId: null\n      };\n    }\n\n    // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let student = {\n        firstname: student.firstname,\n        lastname: student.lastname,\n        email: student.email,\n        GPA: student.GPA,\n        campusId: student.campusId\n    };\n\n    // Add modified student in back-end database\n    let modifiedStudent = await this.props.editStudent(student.id, student);\n\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\", \n      email: \"\",\n      imageURL: \"\",\n      GPA: \"\",\n      campusId: null, \n      redirect: true, \n      redirectId: modifiedStudent.id\n    });\n  }\n\n      // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({redirect: false, redirectId: null});\n}\n\n// Render new student input form\nrender() {\n  // Redirect to new student's page after submit\n  if(this.state.redirect) {\n    return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n  }\n\n  // Display the input form via the corresponding View component\n  return (\n    <div>\n      <Header />\n      <EditStudentView \n        handleChange = {this.handleChange} \n        handleSubmit = {this.handleSubmit}    \n        student      = {this.state}\n      />\n    </div>          \n  );\n}\n}\n\n\n\n// The following input argument is passed to the \"connect\" function used by \"EditStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        editStudent: (student) => dispatch(editStudentThunk(student)),\n        fetchStudent: (studentId) => dispatch(fetchStudentThunk(studentId))\n    })\n}\n\n// Export store-connected container by default\n// EditStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapDispatch)(EditStudentContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module"}