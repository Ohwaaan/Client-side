{"ast":null,"code":"/*==================================================\n/src/store/index.js\n\nIt contains the necessities and accessories for constructing the Redux Store.\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \n================================================== */import{combineReducers,applyMiddleware,createStore}from'redux';import{createLogger}from'redux-logger';import thunk from'redux-thunk';// Import all Reducers from the barrel file (/src/store/reducers/index.js)\nimport*as reducers from'./reducers';// Construct the Redux Store:\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \n// access the states in all Reducers of the app.\nvar rootReducer=combineReducers(reducers);// Create a logger middleware to log dispatched Actions in console,\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\nvar logger=createLogger({collapsed:true});// Collapse console messages when displayed\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\nvar store=createStore(rootReducer,applyMiddleware(thunk,logger));// Export the Redux Store by default, which will be provided to and injected within our entire application\nexport default store;","map":{"version":3,"names":["combineReducers","applyMiddleware","createStore","createLogger","thunk","reducers","rootReducer","logger","collapsed","store"],"sources":["/home/ohwaaan/Hunter/Summer_2022/team/5/client-starter-code-main/src/store/index.js"],"sourcesContent":["/*==================================================\n/src/store/index.js\n\nIt contains the necessities and accessories for constructing the Redux Store.\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \n================================================== */\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\n// Import all Reducers from the barrel file (/src/store/reducers/index.js)\nimport * as reducers from './reducers';\n\n// Construct the Redux Store:\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \n// access the states in all Reducers of the app.\nconst rootReducer = combineReducers(reducers);  \n// Create a logger middleware to log dispatched Actions in console,\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\nconst logger = createLogger({ collapsed: true });  // Collapse console messages when displayed\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\n// Export the Redux Store by default, which will be provided to and injected within our entire application\nexport default store;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,qDACA,OAASA,eAAT,CAA0BC,eAA1B,CAA2CC,WAA3C,KAA8D,OAA9D,CACA,OAASC,YAAT,KAA6B,cAA7B,CACA,MAAOC,MAAP,KAAkB,aAAlB,CAEA;AACA,MAAO,GAAKC,SAAZ,KAA0B,YAA1B,CAEA;AACA;AACA;AACA,GAAMC,YAAW,CAAGN,eAAe,CAACK,QAAD,CAAnC,CACA;AACA;AACA,GAAME,OAAM,CAAGJ,YAAY,CAAC,CAAEK,SAAS,CAAE,IAAb,CAAD,CAA3B,CAAmD;AACnD;AACA,GAAMC,MAAK,CAAGP,WAAW,CAACI,WAAD,CAAcL,eAAe,CAACG,KAAD,CAAQG,MAAR,CAA7B,CAAzB,CAEA;AACA,cAAeE,MAAf"},"metadata":{},"sourceType":"module"}