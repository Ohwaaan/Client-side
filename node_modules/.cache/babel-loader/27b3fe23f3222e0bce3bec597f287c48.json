{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sara\\\\Desktop\\\\webdev final client side\\\\Client-side\\\\src\\\\components\\\\containers\\\\NewStudentContainer.js\";\n\n/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        GPA: this.state.GPA,\n        campusId: this.state.campusId\n      }; // Add new student in back-end database\n\n      let newStudent = await this.props.addStudent(student); // Update state, and trigger redirect to show the new student\n\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        imageURL: \"\",\n        GPA: \"\",\n        campusId: null,\n        redirect: true,\n        redirectId: newStudent.id\n      });\n    };\n\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      imageURL: \"\",\n      GPA: \"\",\n      campusId: null,\n      redirect: false,\n      redirectId: null\n    };\n  } // Capture input data when it is entered\n\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  } // Render new student input form\n\n\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this);\n    } // Display the input form via the corresponding View component\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n} // The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\n\n\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n}; // Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\n\n\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","firstname","state","lastname","email","GPA","campusId","newStudent","addStudent","imageURL","redirect","redirectId","id","componentWillUnmount","render","mapDispatch","dispatch"],"sources":["C:/Users/Sara/Desktop/webdev final client side/Client-side/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewStudentView from '../views/NewStudentView';\r\nimport { addStudentThunk } from '../../store/thunks';\r\n\r\nclass NewStudentContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      email: \"\",\r\n      imageURL: \"\",\r\n      GPA: \"\",\r\n      campusId: null, \r\n      redirect: false, \r\n      redirectId: null\r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let student = {\r\n        firstname: this.state.firstname,\r\n        lastname: this.state.lastname,\r\n        email: this.state.email,\r\n        GPA: this.state.GPA,\r\n        campusId: this.state.campusId\r\n    };\r\n    \r\n    // Add new student in back-end database\r\n    let newStudent = await this.props.addStudent(student);\r\n\r\n    // Update state, and trigger redirect to show the new student\r\n    this.setState({\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      email: \"\",\r\n      imageURL: \"\",\r\n      GPA: \"\",\r\n      campusId: null, \r\n      redirect: true, \r\n      redirectId: newStudent.id\r\n    });\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new student input form\r\n  render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewStudentView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit = {this.handleSubmit}    \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addStudent: (student) => dispatch(addStudentThunk(student)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewStudentContainer);"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAASC,eAAT,QAAgC,oBAAhC;;;AAEA,MAAMC,mBAAN,SAAkCL,SAAlC,CAA4C;EAC1C;EACAM,WAAW,CAACC,KAAD,EAAO;IAChB,MAAMA,KAAN;;IADgB,KAelBC,YAfkB,GAeHC,KAAK,IAAI;MACtB,KAAKC,QAAL,CAAc;QACZ,CAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;MADtB,CAAd;IAGD,CAnBiB;;IAAA,KAsBlBC,YAtBkB,GAsBH,MAAML,KAAN,IAAe;MAC5BA,KAAK,CAACM,cAAN,GAD4B,CACH;;MAEzB,IAAIC,OAAO,GAAG;QACVC,SAAS,EAAE,KAAKC,KAAL,CAAWD,SADZ;QAEVE,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAFX;QAGVC,KAAK,EAAE,KAAKF,KAAL,CAAWE,KAHR;QAIVC,GAAG,EAAE,KAAKH,KAAL,CAAWG,GAJN;QAKVC,QAAQ,EAAE,KAAKJ,KAAL,CAAWI;MALX,CAAd,CAH4B,CAW5B;;MACA,IAAIC,UAAU,GAAG,MAAM,KAAKhB,KAAL,CAAWiB,UAAX,CAAsBR,OAAtB,CAAvB,CAZ4B,CAc5B;;MACA,KAAKN,QAAL,CAAc;QACZO,SAAS,EAAE,EADC;QAEZE,QAAQ,EAAE,EAFE;QAGZC,KAAK,EAAE,EAHK;QAIZK,QAAQ,EAAE,EAJE;QAKZJ,GAAG,EAAE,EALO;QAMZC,QAAQ,EAAE,IANE;QAOZI,QAAQ,EAAE,IAPE;QAQZC,UAAU,EAAEJ,UAAU,CAACK;MARX,CAAd;IAUD,CA/CiB;;IAEhB,KAAKV,KAAL,GAAa;MACXD,SAAS,EAAE,EADA;MAEXE,QAAQ,EAAE,EAFC;MAGXC,KAAK,EAAE,EAHI;MAIXK,QAAQ,EAAE,EAJC;MAKXJ,GAAG,EAAE,EALM;MAMXC,QAAQ,EAAE,IANC;MAOXI,QAAQ,EAAE,KAPC;MAQXC,UAAU,EAAE;IARD,CAAb;EAUD,CAdyC,CAgB1C;;;EAmCA;EACAE,oBAAoB,GAAG;IACnB,KAAKnB,QAAL,CAAc;MAACgB,QAAQ,EAAE,KAAX;MAAkBC,UAAU,EAAE;IAA9B,CAAd;EACH,CAtDyC,CAwD1C;;;EACAG,MAAM,GAAG;IACP;IACA,IAAG,KAAKZ,KAAL,CAAWQ,QAAd,EAAwB;MACtB,oBAAQ,QAAC,QAAD;QAAU,EAAE,EAAG,YAAW,KAAKR,KAAL,CAAWS,UAAW;MAAhD;QAAA;QAAA;QAAA;MAAA,QAAR;IACD,CAJM,CAMP;;;IACA,oBACE;MAAA,wBACE,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,cAAD;QACE,YAAY,EAAI,KAAKnB,YADvB;QAEE,YAAY,EAAI,KAAKM;MAFvB;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EASD;;AAzEyC,C,CA4E5C;AACA;AACA;;;AACA,MAAMiB,WAAW,GAAIC,QAAD,IAAc;EAC9B,OAAO;IACHR,UAAU,EAAGR,OAAD,IAAagB,QAAQ,CAAC5B,eAAe,CAACY,OAAD,CAAhB;EAD9B,CAAP;AAGH,CAJD,C,CAMA;AACA;AACA;;;AACA,eAAef,OAAO,CAAC,IAAD,EAAO8B,WAAP,CAAP,CAA2B1B,mBAA3B,CAAf"},"metadata":{},"sourceType":"module"}